// Code generated by Mir codegen. DO NOT EDIT.

package bcmpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/blockchainpb/bcmpb/events"
	types1 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	stdtypes "github.com/filecoin-project/mir/stdtypes"
)

// Module-specific dsl functions for emitting events.

func NewBlock(m dsl.Module, destModule stdtypes.ModuleID, block *types.Block) {
	dsl.EmitMirEvent(m, events.NewBlock(destModule, block))
}

func NewChain(m dsl.Module, destModule stdtypes.ModuleID, blocks []*types.Block) {
	dsl.EmitMirEvent(m, events.NewChain(destModule, blocks))
}

func GetChainRequest(m dsl.Module, destModule stdtypes.ModuleID, requestId string, sourceModule stdtypes.ModuleID, endBlockId uint64, sourceBlockIds []uint64) {
	dsl.EmitMirEvent(m, events.GetChainRequest(destModule, requestId, sourceModule, endBlockId, sourceBlockIds))
}

func GetChainResponse(m dsl.Module, destModule stdtypes.ModuleID, requestId string, success bool, chain []*types.Block) {
	dsl.EmitMirEvent(m, events.GetChainResponse(destModule, requestId, success, chain))
}

func RegisterCheckpoint(m dsl.Module, destModule stdtypes.ModuleID, blockId uint64, state *types1.State) {
	dsl.EmitMirEvent(m, events.RegisterCheckpoint(destModule, blockId, state))
}

func GetChainToHeadRequest(m dsl.Module, destModule stdtypes.ModuleID, sourceModule stdtypes.ModuleID) {
	dsl.EmitMirEvent(m, events.GetChainToHeadRequest(destModule, sourceModule))
}

func GetChainToHeadResponse(m dsl.Module, destModule stdtypes.ModuleID, chain []*types.Block, checkpointState *types1.State) {
	dsl.EmitMirEvent(m, events.GetChainToHeadResponse(destModule, chain, checkpointState))
}

func InitBlockchain(m dsl.Module, destModule stdtypes.ModuleID, initialState *types1.State) {
	dsl.EmitMirEvent(m, events.InitBlockchain(destModule, initialState))
}
