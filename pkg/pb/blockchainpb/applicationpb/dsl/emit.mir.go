// Code generated by Mir codegen. DO NOT EDIT.

package applicationpbdsl

import (
	dsl "github.com/filecoin-project/mir/pkg/dsl"
	events "github.com/filecoin-project/mir/pkg/pb/blockchainpb/applicationpb/events"
	types2 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/payloadpb/types"
	types "github.com/filecoin-project/mir/pkg/pb/blockchainpb/statepb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/blockchainpb/types"
	stdtypes "github.com/filecoin-project/mir/stdtypes"
)

// Module-specific dsl functions for emitting events.

func VerifyBlocksRequest(m dsl.Module, destModule stdtypes.ModuleID, checkpointState *types.State, chainCheckpointToStart []*types1.Block, chainToVerify []*types1.Block) {
	dsl.EmitMirEvent(m, events.VerifyBlocksRequest(destModule, checkpointState, chainCheckpointToStart, chainToVerify))
}

func VerifyBlocksResponse(m dsl.Module, destModule stdtypes.ModuleID, verifiedBlocks []*types1.Block) {
	dsl.EmitMirEvent(m, events.VerifyBlocksResponse(destModule, verifiedBlocks))
}

func PayloadRequest(m dsl.Module, destModule stdtypes.ModuleID, headId uint64) {
	dsl.EmitMirEvent(m, events.PayloadRequest(destModule, headId))
}

func PayloadResponse(m dsl.Module, destModule stdtypes.ModuleID, headId uint64, payload *types2.Payload) {
	dsl.EmitMirEvent(m, events.PayloadResponse(destModule, headId, payload))
}

func HeadChange(m dsl.Module, destModule stdtypes.ModuleID, removedChain []*types1.Block, addedChain []*types1.Block, checkpointToForkRoot []*types1.Block, checkpointState *types.State) {
	dsl.EmitMirEvent(m, events.HeadChange(destModule, removedChain, addedChain, checkpointToForkRoot, checkpointState))
}

func MessageInput(m dsl.Module, destModule stdtypes.ModuleID, text string) {
	dsl.EmitMirEvent(m, events.MessageInput(destModule, text))
}
