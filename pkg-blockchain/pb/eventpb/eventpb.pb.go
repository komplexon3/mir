// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: eventpb/eventpb.proto

package pbeventpb

import (
	applicationpb "github.com/filecoin-project/mir/pkg-blockchain/pb//applicationpb"
	bcmpb "github.com/filecoin-project/mir/pkg-blockchain/pb//bcmpb"
	broadcastpb "github.com/filecoin-project/mir/pkg-blockchain/pb//broadcastpb"
	interceptorpb "github.com/filecoin-project/mir/pkg-blockchain/pb/interceptorpb"
	minerpb "github.com/filecoin-project/mir/pkg-blockchain/pb/minerpb"
	synchronizerpb "github.com/filecoin-project/mir/pkg-blockchain/pb/synchronizerpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event represents a state event to be injected into the state machine
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestModule string `protobuf:"bytes,1,opt,name=dest_module,json=destModule,proto3" json:"dest_module,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Event_Bcm
	//	*Event_Miner
	//	*Event_Broadcast
	//	*Event_Synchronizer
	//	*Event_Application
	//	*Event_Bcinterceptor
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetDestModule() string {
	if x != nil {
		return x.DestModule
	}
	return ""
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetBcm() *bcmpb.Event {
	if x, ok := x.GetType().(*Event_Bcm); ok {
		return x.Bcm
	}
	return nil
}

func (x *Event) GetMiner() *minerpb.Event {
	if x, ok := x.GetType().(*Event_Miner); ok {
		return x.Miner
	}
	return nil
}

func (x *Event) GetBroadcast() *broadcastpb.Event {
	if x, ok := x.GetType().(*Event_Broadcast); ok {
		return x.Broadcast
	}
	return nil
}

func (x *Event) GetSynchronizer() *synchronizerpb.Event {
	if x, ok := x.GetType().(*Event_Synchronizer); ok {
		return x.Synchronizer
	}
	return nil
}

func (x *Event) GetApplication() *applicationpb.Event {
	if x, ok := x.GetType().(*Event_Application); ok {
		return x.Application
	}
	return nil
}

func (x *Event) GetBcinterceptor() *interceptorpb.Event {
	if x, ok := x.GetType().(*Event_Bcinterceptor); ok {
		return x.Bcinterceptor
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Bcm struct {
	// Events for blockchain
	Bcm *bcmpb.Event `protobuf:"bytes,401,opt,name=bcm,proto3,oneof"`
}

type Event_Miner struct {
	Miner *minerpb.Event `protobuf:"bytes,402,opt,name=miner,proto3,oneof"`
}

type Event_Broadcast struct {
	Broadcast *broadcastpb.Event `protobuf:"bytes,403,opt,name=broadcast,proto3,oneof"`
}

type Event_Synchronizer struct {
	Synchronizer *synchronizerpb.Event `protobuf:"bytes,404,opt,name=synchronizer,proto3,oneof"`
}

type Event_Application struct {
	Application *applicationpb.Event `protobuf:"bytes,405,opt,name=application,proto3,oneof"`
}

type Event_Bcinterceptor struct {
	// Events for blockchain interceptor
	Bcinterceptor *interceptorpb.Event `protobuf:"bytes,410,opt,name=bcinterceptor,proto3,oneof"`
}

func (*Event_Bcm) isEvent_Type() {}

func (*Event_Miner) isEvent_Type() {}

func (*Event_Broadcast) isEvent_Type() {}

func (*Event_Synchronizer) isEvent_Type() {}

func (*Event_Application) isEvent_Type() {}

func (*Event_Bcinterceptor) isEvent_Type() {}

type SerializedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SerializedEvent) Reset() {
	*x = SerializedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventpb_eventpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedEvent) ProtoMessage() {}

func (x *SerializedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eventpb_eventpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedEvent.ProtoReflect.Descriptor instead.
func (*SerializedEvent) Descriptor() ([]byte, []int) {
	return file_eventpb_eventpb_proto_rawDescGZIP(), []int{1}
}

func (x *SerializedEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_eventpb_eventpb_proto protoreflect.FileDescriptor

var file_eventpb_eventpb_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x1a, 0x1d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x62, 0x63, 0x6d, 0x70, 0x62, 0x2f, 0x62, 0x63, 0x6d, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x70, 0x62,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65,
	0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xac, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0x82, 0xa6, 0x1d, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x62, 0x63, 0x6d, 0x18, 0x91, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x63, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x62, 0x63, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x93, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0d, 0x62, 0x63, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x62, 0x63, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x3a, 0x04, 0x88,
	0xa6, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x62, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventpb_eventpb_proto_rawDescOnce sync.Once
	file_eventpb_eventpb_proto_rawDescData = file_eventpb_eventpb_proto_rawDesc
)

func file_eventpb_eventpb_proto_rawDescGZIP() []byte {
	file_eventpb_eventpb_proto_rawDescOnce.Do(func() {
		file_eventpb_eventpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventpb_eventpb_proto_rawDescData)
	})
	return file_eventpb_eventpb_proto_rawDescData
}

var file_eventpb_eventpb_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_eventpb_eventpb_proto_goTypes = []interface{}{
	(*Event)(nil),                // 0: eventpb.Event
	(*SerializedEvent)(nil),      // 1: eventpb.SerializedEvent
	(*bcmpb.Event)(nil),          // 2: bcmpb.Event
	(*minerpb.Event)(nil),        // 3: minerpb.Event
	(*broadcastpb.Event)(nil),    // 4: broadcastpb.Event
	(*synchronizerpb.Event)(nil), // 5: synchronizerpb.Event
	(*applicationpb.Event)(nil),  // 6: applicationpb.Event
	(*interceptorpb.Event)(nil),  // 7: interceptorpb.Event
}
var file_eventpb_eventpb_proto_depIdxs = []int32{
	2, // 0: eventpb.Event.bcm:type_name -> bcmpb.Event
	3, // 1: eventpb.Event.miner:type_name -> minerpb.Event
	4, // 2: eventpb.Event.broadcast:type_name -> broadcastpb.Event
	5, // 3: eventpb.Event.synchronizer:type_name -> synchronizerpb.Event
	6, // 4: eventpb.Event.application:type_name -> applicationpb.Event
	7, // 5: eventpb.Event.bcinterceptor:type_name -> interceptorpb.Event
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_eventpb_eventpb_proto_init() }
func file_eventpb_eventpb_proto_init() {
	if File_eventpb_eventpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventpb_eventpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventpb_eventpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eventpb_eventpb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_Bcm)(nil),
		(*Event_Miner)(nil),
		(*Event_Broadcast)(nil),
		(*Event_Synchronizer)(nil),
		(*Event_Application)(nil),
		(*Event_Bcinterceptor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventpb_eventpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eventpb_eventpb_proto_goTypes,
		DependencyIndexes: file_eventpb_eventpb_proto_depIdxs,
		MessageInfos:      file_eventpb_eventpb_proto_msgTypes,
	}.Build()
	File_eventpb_eventpb_proto = out.File
	file_eventpb_eventpb_proto_rawDesc = nil
	file_eventpb_eventpb_proto_goTypes = nil
	file_eventpb_eventpb_proto_depIdxs = nil
}
